/// Problem 1
/// https://projecteuler.net/problem=1
///
/// If we list all the natural numbers below 10 that are multiples of
/// 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
/// Find the sum of all the multiples of 3 or 5 below 1000.
pub fn sum_of_multiples(mps: &[u32], limit: u32) -> u32 {
    (0..limit).filter(|i| mps.iter().any(|m| i % m == 0)).sum()
}

/// Problem 2
/// https://projecteuler.net/problem=2
///
/// Each new term in the Fibonacci sequence is generated by adding
/// the previous two terms. By starting with 1 and 2, the first 10 terms will be:
///
/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
///
/// By considering the terms in the Fibonacci sequence whose values
/// do not exceed four million, find the sum of the even-valued terms.

pub fn even_fib_numbers(start: (u32, u32), limit: u32) -> u32 {
    Fib::from(start)
        .take_while(|x| x < &limit)
        .filter(|x| x & 1 == 0)
        .sum()
}
struct Fib {
    x: (u32, u32),
}

impl From<(u32, u32)> for Fib {
    fn from(x: (u32, u32)) -> Fib {
        Fib { x }
    }
}

impl Iterator for Fib {
    type Item = u32;
    fn next(&mut self) -> Option<Self::Item> {
        self.x = (self.x.1, self.x.0 + self.x.1);
        Some(self.x.0)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_even_fib_numbers() {
        let start = (1, 2);
        let limit = 4_000_000;
        assert_eq!(4613732, even_fib_numbers(start, limit));
    }

    #[test]
    fn test_sum_of_multiples() {
        let mps = vec![3, 5];
        let limit = 10;
        assert_eq!(23, sum_of_multiples(&mps, limit));
    }

    #[test]
    fn result_sum_of_multiples() {
        let mps = vec![3, 5];
        let limit = 1000;
        assert_eq!(233168, sum_of_multiples(&mps, limit));
    }
}
